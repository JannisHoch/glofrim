MODULE INIT_TOPO_MOD
CONTAINS
SUBROUTINE INIT_TOPO
!**** *INIT_TOPO*  - INIT SETTINGS 

!     Purpose.
!     --------
!         .

!***  Interface.
!     ----------
!        *CALL* *INIT_TOPO

!        Explicit arguments :
!        --------------------
!        None

!        Implicit arguments :
!        --------------------
!        None

!     Method.
!     -------
!        See documentation

!     Externals.
!     ----------

!     Reference.
!     ----------

!     Author.
!     -------
!        EMANUEL DUTRA

!     Modifications.
!     --------------
!        Original : 2011-05-04
!                   Based on the routines by Dai
!     ------------------------------------------------------------------

USE PARKIND1   ,ONLY: JPIM, JPRB, JPRM
USE MOD_INPUT  ,ONLY: LOGNAM,   TMPNAM,   NX,NY,NLFP, IMIS
USE MOD_INPUT  ,ONLY: CGRAREA,CELEVTN,CNXTDST,CRIVWTH,CRIVLEN,CRIVHGT,CFLDHGT,&
                      CRIVCLINC,CRIVPARNC,LFLD,LKINE,LMAPCDF,LMAPEND
USE MOD_INPUT  ,ONLY: LMEANSL, CMEANSL
USE MOD_INPUT  ,ONLY: LDIKHGT, CDIKHGT

USE MOD_MAP    ,ONLY: D2NXTDST, D2GRAREA, D2ELEVTN, D2RIVLEN, D2RIVWTH, D2RIVHGT, D2FLDHGT, &
                      D2RIVELV, D2FLDGRD, D2RIVSTOMAX, D2FLDSTOMAX, DFRCINC, D2MEANSL
USE MOD_MAP    ,ONLY: I2VECTOR, NSEQALL,  NSEQMAX
USE MOD_MAP    ,ONLY: D2DIKHGT, D2DIKSTOMAX, D2DIKFLDSTO
USE MOD_MAP    ,ONLY: D2FLDSTORES
IMPLICIT NONE

INTEGER(KIND=JPIM) :: ISEQ, IX, IY

!!=========================
WRITE(LOGNAM,*) " "
WRITE(LOGNAM,*) "*** INIT_TOPO: ***"

ALLOCATE( D2GRAREA(NSEQMAX,1) )
ALLOCATE( D2ELEVTN(NSEQMAX,1) )
ALLOCATE( D2NXTDST(NSEQMAX,1) )
ALLOCATE( D2RIVLEN(NSEQMAX,1) )
ALLOCATE( D2RIVWTH(NSEQMAX,1) )
ALLOCATE( D2RIVHGT(NSEQMAX,1) )
ALLOCATE( D2FLDHGT(NSEQMAX,1,NLFP) )
ALLOCATE( D2DIKHGT(NSEQMAX,1) )
ALLOCATE( D2MEANSL(NSEQMAX,1) )

D2GRAREA(:,:)=0.D0
D2ELEVTN(:,:)=0.D0
D2NXTDST(:,:)=0.D0
D2RIVLEN(:,:)=0.D0
D2RIVWTH(:,:)=0.D0
D2FLDHGT(:,:,:)=0.D0
D2DIKHGT(:,:)=0.D0
D2MEANSL(:,:)=0.D0

IF ( .not. LMAPCDF ) THEN
  CALL READ_TOPO_BIN
ELSE
  CALL READ_TOPO_CDF
ENDIF

WRITE(LOGNAM,*) 'INIT_TOPO: calc rivstomax (flood initiation)'

ALLOCATE(D2RIVSTOMAX(NSEQMAX,1))
ALLOCATE(D2DIKSTOMAX(NSEQMAX,1))
IF ( LFLD ) THEN
  D2RIVSTOMAX(:,:) = D2RIVLEN(:,:) * D2RIVWTH(:,:) * D2RIVHGT(:,:)
  IF ( LDIKHGT ) THEN
    D2DIKSTOMAX(:,:) = D2RIVLEN(:,:) * D2RIVWTH(:,:) * ( D2RIVHGT(:,:) + D2DIKHGT(:,:) )
  ENDIF
ELSE
  D2RIVSTOMAX(:,:) = 1.D18
  WRITE(LOGNAM,*) 'INIT_TOPO: no floodplain (rivstomax=1.D18)'
ENDIF

WRITE(LOGNAM,*) 'INIT_TOPO: calc river bed elevation (rivelv)'
ALLOCATE(D2RIVELV(NSEQMAX,1))
D2RIVELV(:,:) = D2ELEVTN(:,:) - D2RIVHGT(:,:)

WRITE(LOGNAM,*) 'INIT_TOPO: calc floodplain parameters'
ALLOCATE(D2FLDSTOMAX(NSEQMAX,1,NLFP))
ALLOCATE(D2FLDGRD(NSEQMAX,1,NLFP))
ALLOCATE(D2DIKFLDSTO(NSEQMAX,1))
ALLOCATE(D2FLDSTORES(NSEQMAX,1,NLFP))
CALL SET_FLDSTG
CONTAINS




!!==================================================
SUBROUTINE SET_FLDSTG
IMPLICIT NONE

INTEGER(KIND=JPIM)  ::  ISEQ, I
REAL(KIND=JPRB)     ::  DSTONOW
REAL(KIND=JPRB)     ::  DSTOPRE
REAL(KIND=JPRB)     ::  DHGTPRE
REAL(KIND=JPRB)     ::  DWTHINC

! For D2DIKFLDSTO calculation
REAL(KIND=JPRB)     ::  DWTHPRE
REAL(KIND=JPRB)     ::  DWTHNOW
REAL(KIND=JPRB)     ::  DHGTNOW

! ================================================
D2FLDSTOMAX(:,:,:) = 0.D0
D2FLDGRD(:,:,:)    = 0.D0
D2DIKFLDSTO(:,:)   = 0.D0
DFRCINC=dble(NLFP)**(-1.)
!
DO ISEQ=1, NSEQALL
  DSTOPRE = D2RIVSTOMAX(ISEQ,1)
  DHGTPRE = 0.D0
  DWTHINC = D2GRAREA(ISEQ,1) * D2RIVLEN(ISEQ,1)**(-1.) * DFRCINC
!
! Maximum floodplain storage calculation
  DO I=1, NLFP
    DSTONOW = D2RIVLEN(ISEQ,1) * ( D2RIVWTH(ISEQ,1) + DWTHINC*(DBLE(I)-0.5) ) &
              * (D2FLDHGT(ISEQ,1,I)-DHGTPRE)
    D2FLDSTOMAX(ISEQ,1,I) = DSTOPRE + DSTONOW
    D2FLDGRD(ISEQ,1,I) = (D2FLDHGT(ISEQ,1,I)-DHGTPRE) * DWTHINC**(-1.)
    DSTOPRE = D2FLDSTOMAX(ISEQ,1,I)
    DHGTPRE = D2FLDHGT(ISEQ,1,I)
  END DO
!
! Each flooplain storage calculation
! only floodplain, not include river storage
  DO I=1, NLFP
    D2FLDSTORES(ISEQ,1,I) = D2FLDSTOMAX(ISEQ,1,I) - D2RIVSTOMAX(ISEQ,1) - D2RIVWTH(ISEQ,1) &
                            * D2FLDHGT(ISEQ,1,I) * D2RIVLEN(ISEQ,1)
  END DO
!
! Maximum dike+floodplain storage calculation
  IF ( LDIKHGT ) THEN
    I=1
    DSTOPRE = D2RIVSTOMAX(ISEQ,1)
    DHGTPRE = 0.D0
    DWTHPRE = D2RIVWTH(ISEQ,1)
    DO WHILE( D2DIKHGT(ISEQ,1) > D2FLDHGT(ISEQ,1,I) .AND. I<=NLFP)
      DSTONOW = D2RIVLEN(ISEQ,1) * ( D2RIVWTH(ISEQ,1) + DWTHINC*(DBLE(I)-0.5) ) & 
                * (D2FLDHGT(ISEQ,1,I)-DHGTPRE)
      DSTOPRE = DSTOPRE + DSTONOW
      DWTHPRE = DWTHPRE + DWTHINC
      I=I+1
      IF( I>NLFP ) EXIT
    END DO
!
    IF( I>NLFP ) THEN
      DSTONOW = DWTHPRE * (D2DIKHGT(ISEQ,1) - D2FLDHGT(ISEQ,1,NLFP)) * D2RIVLEN(ISEQ,1)
      D2DIKFLDSTO(ISEQ,1) = DSTOPRE + DSTONOW
    ELSE
      IF( I==1 ) THEN
        DHGTNOW = D2DIKHGT(ISEQ,1)
      ELSE
        DHGTNOW = D2DIKHGT(ISEQ,1) - D2FLDHGT(ISEQ,1,I-1)
      ENDIF
      DWTHNOW = DWTHPRE + DHGTNOW * D2FLDGRD(ISEQ,1,I)**(-1.)
      DSTONOW = D2RIVLEN(ISEQ,1) * ( DWTHPRE + DWTHNOW )*0.5 * DHGTNOW
      D2DIKFLDSTO(ISEQ,1) = DSTOPRE + DSTONOW
    ENDIF
  ENDIF
END DO
!
RETURN
END SUBROUTINE SET_FLDSTG





! =================================================
SUBROUTINE READ_TOPO_BIN
IMPLICIT NONE

REAL(KIND=JPRM),ALLOCATABLE  :: R2TEMP(:,:)
REAL(KIND=JPRB),ALLOCATABLE  :: D2TEMP(:,:)
INTEGER(KIND=JPIM)           :: ILFP

ALLOCATE(R2TEMP(NX,NY))
ALLOCATE(D2TEMP(NSEQMAX,1))
!!===================================
!! 2. Read binary data

WRITE(LOGNAM,*)'INIT_TOPO: unit-catchment area : ',TRIM(CGRAREA) 
OPEN(TMPNAM,FILE=CGRAREA,FORM='UNFORMATTED',ACCESS='DIRECT',RECL=4*NX*NY)
READ(TMPNAM,REC=1) R2TEMP(:,:)
  IF( LMAPEND ) CALL CONV_END(R2TEMP)
CALL MAP2VEC(R2TEMP,D2GRAREA)
CLOSE(TMPNAM)

WRITE(LOGNAM,*)'INIT_TOPO: ground elevation : ',TRIM(CELEVTN)
OPEN(TMPNAM,FILE=CELEVTN,FORM='UNFORMATTED',ACCESS='DIRECT',RECL=4*NX*NY)
READ(TMPNAM,REC=1) R2TEMP(:,:)
  IF( LMAPEND ) CALL CONV_END(R2TEMP)
CALL MAP2VEC(R2TEMP,D2ELEVTN)
CLOSE(TMPNAM)

WRITE(LOGNAM,*)'INIT_TOPO: downstream distance : ',TRIM(CNXTDST)
OPEN(TMPNAM,FILE=CNXTDST,FORM='UNFORMATTED',ACCESS='DIRECT',RECL=4*NX*NY)
READ(TMPNAM,REC=1) R2TEMP(:,:)
  IF( LMAPEND ) CALL CONV_END(R2TEMP)
CALL MAP2VEC(R2TEMP,D2NXTDST)
CLOSE(TMPNAM)

WRITE(LOGNAM,*)'INIT_TOPO: river channel width : ',TRIM(CRIVWTH)
OPEN(TMPNAM,FILE=CRIVWTH,FORM='UNFORMATTED',ACCESS='DIRECT',RECL=4*NX*NY)
READ(TMPNAM,REC=1) R2TEMP(:,:)
  IF( LMAPEND ) CALL CONV_END(R2TEMP)
CALL MAP2VEC(R2TEMP,D2RIVWTH)
CLOSE(TMPNAM)

WRITE(LOGNAM,*)'INIT_TOPO: river channel depth : ',TRIM(CRIVHGT)
OPEN(TMPNAM,FILE=CRIVHGT,FORM='UNFORMATTED',ACCESS='DIRECT',RECL=4*NX*NY)
READ(TMPNAM,REC=1) R2TEMP(:,:)
  IF( LMAPEND ) CALL CONV_END(R2TEMP)
CALL MAP2VEC(R2TEMP,D2RIVHGT)
CLOSE(TMPNAM)

WRITE(LOGNAM,*)'INIT_TOPO: river channel length : ',TRIM(CRIVLEN)
OPEN(TMPNAM,FILE=CRIVLEN,FORM='UNFORMATTED',ACCESS='DIRECT',RECL=4*NX*NY)
READ(TMPNAM,REC=1) R2TEMP(:,:)
  IF( LMAPEND ) CALL CONV_END(R2TEMP)
CALL MAP2VEC(R2TEMP,D2RIVLEN)
CLOSE(TMPNAM)

IF( LDIKHGT ) THEN
  WRITE(LOGNAM,*)'INIT_TOPO: river dike height : ',TRIM(CDIKHGT)
  OPEN(TMPNAM,FILE=CDIKHGT,FORM='UNFORMATTED',ACCESS='DIRECT',RECL=4*NX*NY)
  READ(TMPNAM,REC=1) R2TEMP(:,:)
    IF( LMAPEND ) CALL CONV_END(R2TEMP)
  CALL MAP2VEC(R2TEMP,D2DIKHGT)
  CLOSE(TMPNAM)
ENDIF

WRITE(LOGNAM,*)'INIT_TOPO: floodplain elevation profile : ',TRIM(CFLDHGT)
OPEN(TMPNAM,FILE=TRIM(CFLDHGT),FORM='UNFORMATTED',ACCESS='DIRECT',RECL=4*NX*NY)
DO ILFP=1,NLFP
  READ(TMPNAM,REC=ILFP) R2TEMP
  IF( LMAPEND ) CALL CONV_END(R2TEMP)
  CALL MAP2VEC(R2TEMP,D2TEMP)
  D2FLDHGT(:,:,ILFP)= D2TEMP(:,:)
ENDDO
CLOSE(TMPNAM)

IF( LMEANSL ) THEN
WRITE(LOGNAM,*)'INIT_TOPO: mean sea level : ',TRIM(CMEANSL)
OPEN(TMPNAM,FILE=CMEANSL,FORM='UNFORMATTED',ACCESS='DIRECT',RECL=4*NX*NY)
READ(TMPNAM,REC=1) R2TEMP(:,:)
  IF( LMAPEND ) CALL CONV_END(R2TEMP)
CALL MAP2VEC(R2TEMP,D2MEANSL)
CLOSE(TMPNAM)
ENDIF

DEALLOCATE(R2TEMP)
DEALLOCATE(D2TEMP)

END SUBROUTINE READ_TOPO_BIN



! =================================================
SUBROUTINE READ_TOPO_CDF
#ifdef UseCDF
USE NETCDF 
USE LIB_NETCDF_UTIL
IMPLICIT NONE

INTEGER(KIND=JPIM)           :: NCID,VARID
INTEGER(KIND=JPIM)           :: ILEV

REAL(KIND=JPRM),ALLOCATABLE     :: R2TEMP(:,:)
REAL(KIND=JPRB),ALLOCATABLE     :: D2TEMP(:,:)

!!=============================
ALLOCATE(R2TEMP(NX,NY))
ALLOCATE(D2TEMP(NSEQMAX,1))

!! CLIM FILE
CALL NCERROR (NF90_OPEN(CRIVCLINC,NF90_NOWRITE,NCID),'opening '//TRIM(CRIVCLINC) )

WRITE(LOGNAM,*)'INIT_TOPO: grarea:',TRIM(CRIVCLINC)
CALL NCERROR ( NF90_INQ_VARID(NCID,'grarea',VARID),'getting id' )
CALL NCERROR ( NF90_GET_VAR(NCID,VARID,R2TEMP),'reading data' )
CALL MAP2VEC(R2TEMP,D2GRAREA)

WRITE(LOGNAM,*)'INIT_TOPO: elevtn:',TRIM(CRIVCLINC)
CALL NCERROR ( NF90_INQ_VARID(NCID,'elevtn',VARID),'getting id' )
CALL NCERROR ( NF90_GET_VAR(NCID,VARID,R2TEMP),'reading data' ) 
CALL MAP2VEC(R2TEMP,D2ELEVTN)

WRITE(LOGNAM,*)'INIT_TOPO: nxtdst:',TRIM(CRIVCLINC)
CALL NCERROR ( NF90_INQ_VARID(NCID,'nxtdst',VARID),'getting id' )
CALL NCERROR ( NF90_GET_VAR(NCID,VARID,R2TEMP),'reading data' ) 
CALL MAP2VEC(R2TEMP,D2NXTDST)

WRITE(LOGNAM,*)'INIT_TOPO: rivlen:',TRIM(CRIVCLINC)
CALL NCERROR ( NF90_INQ_VARID(NCID,'rivlen',VARID),'getting id' )
CALL NCERROR ( NF90_GET_VAR(NCID,VARID,R2TEMP),'reading data' ) 
CALL MAP2VEC(R2TEMP,D2RIVLEN)

WRITE(LOGNAM,*)'INIT_TOPO: fldhgt:',TRIM(CRIVCLINC)
CALL NCERROR ( NF90_INQ_VARID(NCID,'fldhgt',VARID),'getting id' )
DO ILEV=1,NLFP
  CALL NCERROR ( NF90_GET_VAR(NCID,VARID,R2TEMP,(/1,1,ILEV/),(/NX,NY,1/)),'reading data' ) 
  CALL MAP2VEC(R2TEMP,D2TEMP)
  D2FLDHGT(:,:,ILEV)=D2TEMP(:,:)
ENDDO

CALL NCERROR( NF90_CLOSE(NCID))

!!========== 
!! PAR FILE 
CALL NCERROR (NF90_OPEN(CRIVPARNC,NF90_NOWRITE,NCID),'opening '//TRIM(CRIVPARNC) )

WRITE(LOGNAM,*)'INIT_TOPO: rivwth:',TRIM(CRIVPARNC)
CALL NCERROR ( NF90_INQ_VARID(NCID,'rivwth',VARID),'getting id' )
CALL NCERROR ( NF90_GET_VAR(NCID,VARID,R2TEMP),'reading data' ) 
CALL MAP2VEC(R2TEMP,D2RIVWTH)

WRITE(LOGNAM,*)'INIT_TOPO: rivhgt:',TRIM(CRIVPARNC)
CALL NCERROR ( NF90_INQ_VARID(NCID,'rivhgt',VARID),'getting id' )
CALL NCERROR ( NF90_GET_VAR(NCID,VARID,R2TEMP),'reading data' ) 
CALL MAP2VEC(R2TEMP,D2RIVHGT)

CALL NCERROR( NF90_CLOSE(NCID))

DEALLOCATE(R2TEMP)
DEALLOCATE(D2TEMP)

#endif

END SUBROUTINE READ_TOPO_CDF




! =================================================
SUBROUTINE CONV_END(R2TEMP)

IMPLICIT NONE
REAL(KIND=JPRM)    :: R2TEMP(NX,NY)

#ifdef ConvEnd
DO IY=1, NY
  DO IX=1, NY
    CALL ENDIAN4(R2TEMP(IX,IY))
  END DO
END DO
#endif

END SUBROUTINE CONV_END



! =================================================
SUBROUTINE MAP2VEC(R2TEMP,D2VAR)
IMPLICIT NONE

REAL(KIND=JPRM)              :: R2TEMP(NX,NY)
REAL(KIND=JPRB)              :: D2VAR(NSEQMAX,1)

DO IY=1, NY
  DO IX=1, NX
    IF( I2VECTOR(IX,IY)>0 )THEN
      ISEQ=I2VECTOR(IX,IY)
      D2VAR(ISEQ,1)=DBLE(R2TEMP(IX,IY))
    ENDIF
  END DO
END DO

END SUBROUTINE MAP2VEC




END SUBROUTINE INIT_TOPO
END MODULE INIT_TOPO_MOD
