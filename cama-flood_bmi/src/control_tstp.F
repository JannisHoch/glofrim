MODULE CONTROL_TSTP_MOD
CONTAINS 
SUBROUTINE CONTROL_TSTP
! ================================================
! CONTROL TIME-STEP INTEGRATION
! ================================================
USE PARKIND1   ,ONLY: JPIM, JPRB, JPRM
USE MOD_INPUT  ,ONLY: LOGNAM, NX, NY, DT, LOUTCDF
USE MOD_INPUT  ,ONLY: LBOUNDSL
USE MOD_TIME   ,ONLY: KSTEP,  NSTEPS, KYYYYMMDD, KHHMM, KMIN, KMINSTART, KYYYYMMDDP, KHHMMP, KMINP
USE MOD_MAP    ,ONLY: NSEQMAX, NPTHOUT, NPTHLEV
USE MOD_DIAG   ,ONLY: D2RIVINF, D2RIVDPH, D2RIVVEL, D2FLDINF, D2FLDDPH, D2FLDFRC, D2FLDARE,&
                      D2PTHOUT, D2PTHINF, D2SFCELV, D2OUTFLW, D2STORGE
USE MOD_DIAG   ,ONLY: D2OUTFLW_AVG, D2RIVOUT_AVG, D2FLDOUT_AVG, D2RIVVEL_AVG, D2PTHOUT_AVG, D1PTHFLW_AVG, D2OUTINS, NADD
USE LIB_DATES  ,ONLY: MIN2DATE, SPLITDATE

! USE MOD_PROG   ,ONLY: D2RIVSTO_OUT, D2FLDSTO_OUT, D2RIVOUT_OUT, D2FLDOUT_OUT, D1PTHFLW_OUT
! USE MOD_PROG   ,ONLY: D2RIVSTO_IN, D2FLDSTO_IN, D2RIVOUT_IN , D2FLDOUT_IN, D1PTHFLW_IN

USE CONTROL_INP_MOD
USE CONTROL_BOUND_MOD
USE CONTROL_PHY_MOD
USE CONTROL_OUT_MOD
USE CONTROL_REST_MOD
!$ USE OMP_LIB
implicit none

INTEGER(KIND=JPIM)    ::    ISTEP                              !! local time step
INTEGER(KIND=JPIM)    ::    IYYYY, IMM, IDD                    !! date (end of time step)
INTEGER(KIND=JPIM)    ::    IYYYYP,IMMP,IDDP                   !! date (start of time step)
REAL(KIND=JPRM)       ::    ETIME,ELAPSED(2),TOTAL,TOTAL1,TSEC !! time elapsed related

! ================================================
WRITE(LOGNAM,*) '*** CONTROLTSTP: ***'

CALL INIT_DIAG
CALL SPLITDATE(KYYYYMMDD,IYYYY,IMM,IDD)

#ifdef UseCDF
KMINP=KMIN
CALL CONTROL_INP(IYYYY,IMM,IDD)
#endif

write(LOGNAM,*) '[main] calculation start'
write (LOGNAM,*) 'YYYY/MM/DD_HH:MM  ADP_IT  Sto(t)  Sto(flw)  Sto(t+1)  Sto(riv)  Sto(fld)  Inf  Out   Err   Fare'

TOTAL=ETIME(ELAPSED)
DO ISTEP=1,NSTEPS

  !!========
  !! 1. UPDATE TIME 
  IYYYYP=IYYYY                                !! IYYYP, IMMP, IDDP , KYYYMMDDP, KHHMMP, KMINP: (start of the current time step)
  IMMP=IMM
  IDDP=IDD
  KYYYYMMDDP=KYYYYMMDD
  KHHMMP=KHHMM
  KMINP=KMIN
  KSTEP=ISTEP
  KMIN=INT ( KMINSTART+KSTEP*(DT/60_JPIM) )   !! update KMIN (end of the current time step)
  CALL MIN2DATE(KMIN,KYYYYMMDD,KHHMM)         !! IYYY, IMM, IDD , KYYYMMDD, KHHMM, KMIN: (end of the current time step)
  CALL SPLITDATE(KYYYYMMDD,IYYYY,IMM,IDD)

  ! ==========================================
  !  2. UPDATE BOUNDARY SEA LEVEL AT 10 min
  IF (( LBOUNDSL ) .and. MOD(KHHMMP,10)==0 ) THEN 

!  IF (( LBOUNDSL ) .and. KYYYYMMDDP*10000+KHHMMP>=200508231800  &
!          .and. KYYYYMMDDP*10000+KHHMMP<=200509060600 &
!          .and. MOD(KHHMMP,10)==0 ) THEN ! Hurricane Katrina, 2005

!  IF (( LBOUNDSL ) .and. KYYYYMMDDP*10000+KHHMMP>=200711100600  &
!          .and. KYYYYMMDDP*10000+KHHMMP<=200711182350 &
!          .and. MOD(KHHMMP,10)==0 ) THEN ! Cyclone Sidr, 2007

!  IF (( LBOUNDSL ) .and. KYYYYMMDDP*10000+KHHMMP>=200804251200 &
!          .and. KYYYYMMDDP*10000+KHHMMP<=200805031200 &
!          .and. MOD(KHHMMP,10)==0 ) THEN ! Cyclone Nargis, 2008

    CALL CONTROL_BOUND(IYYYYP,IMMP,IDDP,KHHMMP)
  ENDIF
  
  ! ==========================================
  !  3. UPDATE RUNOFF AT 00H
  IF ( KHHMMP==0 ) THEN
    CALL CONTROL_INP(IYYYYP,IMMP,IDDP)
  ENDIF

  ! ==========================================
  !  4. MAIN CALCULATION
  CALL CONTROL_PHY
  
  ! ============================================
  !  5. UPDATE DIAGNOSTICS, AND WRITE TO OUTPUT IF THATS THE CASE
  CALL CONTROL_OUT(IYYYYP,IMMP,IDDP)
                   
  !  ===============================
  !  6. WRTE_RESTART
  CALL CONTROL_REST(ISTEP,IYYYY,IMM,IDD)
!  ! ============================================
!  !  7. UPDATE PROGNOSTICS T+1 > T 
!  D2RIVSTO_IN(:,:)=D2RIVSTO_OUT(:,:)
!  D2FLDSTO_IN(:,:)=D2FLDSTO_OUT(:,:)
!  D2RIVOUT_IN(:,:)=D2RIVOUT_OUT(:,:)
!  D2FLDOUT_IN(:,:)=D2FLDOUT_OUT(:,:)
!  D1PTHFLW_IN(:,:)  =D1PTHFLW_OUT(:,:)

  IF (IDDP .NE. IDD) THEN
    TOTAL1=ETIME(ELAPSED)
    TSEC=TOTAL1-TOTAL
    TOTAL=TOTAL1
    WRITE(LOGNAM,'(A6,I5,I3,I3,I5,I10,F7.2,F7.2,A4)') 'TIME: ',IYYYY,IMM,IDD,KHHMM,KSTEP,100.*REAL(KSTEP)/REAL(NSTEPS),TSEC,'sec'
  ENDIF
ENDDO



CONTAINS

! ===============================================
SUBROUTINE INIT_DIAG

ALLOCATE(D2RIVINF(NSEQMAX,1))
ALLOCATE(D2RIVDPH(NSEQMAX,1))
ALLOCATE(D2RIVVEL(NSEQMAX,1))

ALLOCATE(D2FLDINF(NSEQMAX,1))
ALLOCATE(D2FLDDPH(NSEQMAX,1))
ALLOCATE(D2FLDFRC(NSEQMAX,1))
ALLOCATE(D2FLDARE(NSEQMAX,1))

ALLOCATE(D2PTHOUT(NSEQMAX,1))
ALLOCATE(D2PTHINF(NSEQMAX,1))

ALLOCATE(D2SFCELV(NSEQMAX,1))
ALLOCATE(D2OUTFLW(NSEQMAX,1))
ALLOCATE(D2STORGE(NSEQMAX,1))

ALLOCATE(D2RIVOUT_AVG(NSEQMAX,1))
ALLOCATE(D2FLDOUT_AVG(NSEQMAX,1))
ALLOCATE(D2RIVVEL_AVG(NSEQMAX,1))
ALLOCATE(D2PTHOUT_AVG(NSEQMAX,1))
ALLOCATE(D2OUTFLW_AVG(NSEQMAX,1))    !! bugfix v362
ALLOCATE(D1PTHFLW_AVG(NPTHOUT,NPTHLEV))
ALLOCATE(D2OUTINS(NSEQMAX,1))

D2RIVINF(:,:)=0.D0
D2RIVDPH(:,:)=0.D0
D2RIVVEL(:,:)=0.D0

D2FLDINF(:,:)=0.D0
D2FLDDPH(:,:)=0.D0
D2FLDFRC(:,:)=0.D0
D2FLDARE(:,:)=0.D0

D2PTHOUT(:,:)=0.D0
D2PTHINF(:,:)=0.D0

D2SFCELV(:,:)=0.D0
D2OUTFLW(:,:)=0.D0
D2STORGE(:,:)=0.D0

D2RIVOUT_AVG(:,:)=0.D0
D2FLDOUT_AVG(:,:)=0.D0
D2RIVVEL_AVG(:,:)=0.D0
D2PTHOUT_AVG(:,:)=0.D0
D1PTHFLW_AVG(:,:)=0.D0
D2OUTFLW_AVG(:,:)=0.D0     !! bugfix v362
NADD=0

D2OUTINS(:,:)=0.D0

END SUBROUTINE INIT_DIAG





END SUBROUTINE CONTROL_TSTP
END MODULE CONTROL_TSTP_MOD
