MODULE CALC_OUTPRE_MOD
CONTAINS
SUBROUTINE CALC_OUTPRE
! ================================================
! to   Calculate discharge, diffusive wave, for storage only restart
! ================================================
USE PARKIND1   ,ONLY: JPIM, JPRB
USE MOD_INPUT  ,ONLY: LFLDOUT, LPTHOUT
USE MOD_INPUT  ,ONLY: PMANRIV,  PMANFLD,  PDSTMTH
USE MOD_MAP    ,ONLY: I1NEXT,   NSEQALL,  NSEQRIV,  NSEQMAX,  NPTHOUT
USE MOD_MAP    ,ONLY: D2RIVELV, D2ELEVTN, D2NXTDST, D2RIVWTH, D2RIVLEN
USE MOD_MAP    ,ONLY: NPTHOUT, NPTHLEV, PTH_UPST, PTH_DOWN, PTH_DST, PTH_ELV, PTH_WTH, PTH_MAN
USE MOD_PROG   ,ONLY: D2RIVOUT_PRE, D2FLDOUT_PRE, D1PTHFLW_PRE ,D2RIVDPH_PRE         !! output
USE MOD_PROG   ,ONLY: D2FLDSTO_OUT                                    !! input
USE MOD_DIAG   ,ONLY: D2RIVDPH, D2SFCELV, D2FLDDPH                    !! input

implicit none

!*** Local
      REAL(KIND=JPRB)    ::  D2SFCELV_FLD(NSEQMAX,1)                  !! water surface elev (t)  [m] (for floodplain)
      REAL(KIND=JPRB)    ::  D2FLWARE_NOW(NSEQMAX,1)                  !! flow area (t)           [m2]

!$ SAVE
      INTEGER(KIND=JPIM) ::  ISEQ, JSEQ, IPTH, ILEV, ISEQP, JSEQP
      REAL(KIND=JPRB)    ::  DSLOPE, DAREA, DFLW
!$OMP THREADPRIVATE         (DSLOPE, DAREA, DFLW, JSEQ, ILEV, ISEQP, JSEQP)
! ================================================
!$OMP PARALLEL DO
DO ISEQ=1, NSEQALL
  D2RIVDPH_PRE(ISEQ,1) = D2RIVDPH(ISEQ,1)                           !! bugfix v362
  D2SFCELV(ISEQ,1)     = D2RIVELV(ISEQ,1) + D2RIVDPH(ISEQ,1)
  
  D2SFCELV_FLD(ISEQ,1) = MAX( D2ELEVTN(ISEQ,1), D2SFCELV(ISEQ,1) )
  D2FLWARE_NOW(ISEQ,1) = D2FLDSTO_OUT(ISEQ,1) * D2RIVLEN(ISEQ,1)**(-1.D0)
END DO
!$OMP END PARALLEL DO

!$OMP PARALLEL DO
DO ISEQ=1, NSEQRIV                                                    !! for normal cells
  JSEQ=I1NEXT(ISEQ)

  DSLOPE =  (D2SFCELV(ISEQ,1)-D2SFCELV(JSEQ,1)) * D2NXTDST(ISEQ,1)**(-1.D0)
  DFLW = MAX(D2SFCELV(ISEQ,1),D2SFCELV(JSEQ,1)) - D2RIVELV(ISEQ,1)
  DAREA = D2RIVWTH(ISEQ,1) * DFLW

  IF( DAREA>1.D-5 )THEN
    D2RIVOUT_PRE(ISEQ,1) = DAREA * ( PMANRIV**(-1.D0) * DFLW**0.6667D0 * abs(DSLOPE)**(0.5D0) )
    IF( DSLOPE<0.D0 ) D2RIVOUT_PRE(ISEQ,1)=-D2RIVOUT_PRE(ISEQ,1)
  ELSE
    D2RIVOUT_PRE(ISEQ,1) = 0.D0
  ENDIF
END DO
!$OMP END PARALLEL DO

!$OMP PARALLEL DO                                                     !! for river mouth grids
DO ISEQ=NSEQRIV+1, NSEQALL
  DSLOPE = ( D2SFCELV(ISEQ,1)-D2ELEVTN(ISEQ,1) ) * PDSTMTH**(-1.D0)
!!  DSLOPE = MAX( DSLOPE, 0.D0 )                                        !! no backfrom from ocean
  DFLW   = D2RIVDPH(ISEQ,1)
  DAREA  = D2RIVWTH(ISEQ,1) * DFLW
  IF( DAREA>1.D-5 )THEN
    D2RIVOUT_PRE(ISEQ,1) = DAREA * ( PMANRIV**(-1.D0) * DFLW**0.6667D0 * abs(DSLOPE)**(0.5D0) )
    IF( DSLOPE<0.D0 ) D2RIVOUT_PRE(ISEQ,1)=-D2RIVOUT_PRE(ISEQ,1)
  ELSE
    D2RIVOUT_PRE(ISEQ,1) = 0.D0
  ENDIF
END DO
!$OMP END PARALLEL DO



IF( LFLDOUT )THEN
 !$OMP PARALLEL DO
 DO ISEQ=1, NSEQRIV                                                    !! for normal cell
  JSEQ=I1NEXT(ISEQ)

  DSLOPE  = (D2SFCELV_FLD(ISEQ,1)-D2SFCELV_FLD(JSEQ,1)) * D2NXTDST(ISEQ,1)**(-1.D0)

  DFLW = MIN(D2SFCELV_FLD(ISEQ,1),D2SFCELV_FLD(JSEQ,1)) - D2ELEVTN(ISEQ,1)        !! should be min[i,j] to avoid instability
  DFLW = MAX(DFLW,0.D0)
  DAREA= MIN( D2FLWARE_NOW(ISEQ,1), D2FLWARE_NOW(JSEQ,1) )
  IF( DAREA<=0.D0 ) DAREA=D2FLWARE_NOW(ISEQ,1)

  IF( DAREA>1.D-5 )THEN
    D2FLDOUT_PRE(ISEQ,1) = DAREA * ( PMANFLD**(-1.D0) * DFLW**0.6667D0 * abs(DSLOPE)**(0.5D0) )
    IF( DSLOPE<0.D0 ) D2FLDOUT_PRE(ISEQ,1)=-D2FLDOUT_PRE(ISEQ,1)
  ELSE
    D2FLDOUT_PRE(ISEQ,1) = 0.D0
  ENDIF
END DO
!$OMP END PARALLEL DO

!$OMP PARALLEL DO
DO ISEQ=NSEQRIV+1, NSEQALL                                            !! for river mouth cell
  DSLOPE = ( D2SFCELV_FLD(ISEQ,1)-D2ELEVTN(ISEQ,1) ) * PDSTMTH**(-1.D0)
!  DSLOPE = MAX( DSLOPE, 0.D0 )                                        !! no backward flow from ocean
  DFLW   = D2FLDDPH(ISEQ,1)

  DAREA= D2FLWARE_NOW(ISEQ,1)

  IF( DAREA>1.D-5 )THEN
    D2FLDOUT_PRE(ISEQ,1) = DAREA * ( PMANFLD**(-1.D0) * DFLW**0.6667D0 * abs(DSLOPE)**(0.5D0) )
    IF( DSLOPE<0.D0 ) D2FLDOUT_PRE(ISEQ,1)=-D2FLDOUT_PRE(ISEQ,1)
  ELSE
    D2FLDOUT_PRE(ISEQ,1) = 0.D0
  ENDIF
 END DO
 !$OMP END PARALLEL DO
ENDIF



IF( LPTHOUT )THEN
 !$OMP PARALLEL DO
 DO IPTH=1, NPTHOUT  
  ISEQP=PTH_UPST(IPTH)
  JSEQP=PTH_DOWN(IPTH)

  DSLOPE  = (D2SFCELV(ISEQP,1)-D2SFCELV(JSEQP,1)) * PTH_DST(IPTH)**(-1.D0)

  DO ILEV=1, NPTHLEV
    DFLW = MAX(D2SFCELV(ISEQP,1),D2SFCELV(JSEQP,1)) - PTH_ELV(IPTH,ILEV) 
    DFLW = MAX(DFLW,0.D0)

    IF( DFLW>1.D-5 )THEN
      D1PTHFLW_PRE(IPTH,ILEV) = PTH_WTH(IPTH,ILEV) * DFLW * ( PTH_MAN(ILEV)**(-1.D0) * DFLW**0.6667D0 * abs(DSLOPE)**(0.5D0) )
      IF( DSLOPE<0.D0 ) D1PTHFLW_PRE(IPTH,ILEV)=-D1PTHFLW_PRE(IPTH,ILEV)
    ELSE
      D1PTHFLW_PRE(IPTH,ILEV) = 0.D0
    ENDIF
  END DO
 END DO
 !$OMP END PARALLEL DO
ENDIF

END SUBROUTINE CALC_OUTPRE
END MODULE CALC_OUTPRE_MOD
