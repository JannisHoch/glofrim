MODULE CALC_PTHOUT_MOD
CONTAINS
SUBROUTINE CALC_PTHOUT
! ================================================
! calculation of floodplain flow
! ================================================
USE PARKIND1   ,ONLY: JPIM, JPRB
USE MOD_INPUT  ,ONLY: DT
USE MOD_INPUT  ,ONLY: PGRV
USE MOD_MAP    ,ONLY: NSEQMAX, NPTHOUT, NPTHLEV, PTH_UPST, PTH_DOWN, PTH_DST, PTH_ELV, PTH_WTH, PTH_MAN
USE MOD_MAP    ,ONLY: D2RIVELV
USE MOD_PROG   ,ONLY: D2RIVSTO_OUT, D2FLDSTO_OUT, D1PTHFLW_OUT, D2RIVOUT_OUT, D2FLDOUT_OUT
USE MOD_PROG   ,ONLY: D1PTHFLW_PRE, D2RIVDPH_PRE
USE MOD_DIAG   ,ONLY: D2PTHOUT, D2PTHINF, D2RIVINF, D2FLDINF, D2SFCELV

implicit none

!*** Local
      REAL(KIND=JPRB)    ::  D2SFCELV_PRE(NSEQMAX,1)                  !! water surface elev (t-1)[m] (for floodplain)
      REAL(KIND=JPRB)    ::  D2RATE(NSEQMAX,1)                        !! outflow correction

!$ SAVE
      INTEGER(KIND=JPIM) ::  IPTH, ILEV, ISEQ, ISEQP, JSEQP
      REAL(KIND=JPRB)    ::  DSLOPE, DFLW, DOUT_PRE, DFLW_PRE, DFLW_IMP, DSTO_TMP
!$OMP THREADPRIVATE         (DSLOPE, DFLW, DOUT_PRE, DFLW_PRE, DFLW_IMP, DSTO_TMP, ILEV, ISEQP, JSEQP)
! ================================================
!$OMP PARALLEL DO
DO ISEQ=1, NSEQMAX
  D2SFCELV_PRE(ISEQ,1) = D2RIVELV(ISEQ,1)+D2RIVDPH_PRE(ISEQ,1)
  D2PTHOUT(ISEQ,1) = 0.D0
  D2PTHINF(ISEQ,1) = 0.D0
  D2RATE(ISEQ,1)=-999.
END DO
!$OMP END PARALLEL DO

!$OMP PARALLEL DO
DO IPTH=1, NPTHOUT  
  ISEQP=PTH_UPST(IPTH)
  JSEQP=PTH_DOWN(IPTH)

  DSLOPE  = (D2SFCELV(ISEQP,1)-D2SFCELV(JSEQP,1)) * PTH_DST(IPTH)**(-1.D0)

  DO ILEV=1, NPTHLEV

    DFLW = MAX(D2SFCELV(ISEQP,1),D2SFCELV(JSEQP,1)) - PTH_ELV(IPTH,ILEV) 
    DFLW = MAX(DFLW,0.D0)

    DFLW_PRE = MIN(D2SFCELV_PRE(ISEQP,1),D2SFCELV_PRE(JSEQP,1)) - PTH_ELV(IPTH,ILEV)
    DFLW_PRE = MAX(DFLW_PRE,0.D0)
    DFLW_IMP = (DFLW*DFLW_PRE)**0.5D0                                       !! semi implicit flow depth

    IF( DFLW_IMP<=0.D0 ) DFLW_IMP=DFLW

    IF( DFLW_IMP>1.D-5 )THEN                         !! local inertial equation, see [Bates et al., 2010, J.Hydrol.]
      DOUT_PRE = D1PTHFLW_PRE(IPTH,ILEV) * PTH_WTH(IPTH,ILEV)**(-1.D0)                         !! outflow (t-1) [m2/s] (unit width)
      D1PTHFLW_OUT(IPTH,ILEV) = PTH_WTH(IPTH,ILEV) * ( DOUT_PRE + PGRV*DT*DFLW_IMP*DSLOPE ) &
                         * ( 1.D0 + PGRV*DT*PTH_MAN(ILEV)**2.D0*abs(DOUT_PRE)*DFLW_IMP**(-7.D0/3.D0) )**(-1.D0)
    ELSE
      D1PTHFLW_OUT(IPTH,ILEV) = 0.D0
    ENDIF

    IF( D1PTHFLW_OUT(IPTH,ILEV) >= 0.D0 )THEN                                  !! total outflow from each grid
!$OMP ATOMIC
      D2PTHOUT(ISEQP,1) = D2PTHOUT(ISEQP,1) + D1PTHFLW_OUT(IPTH,ILEV)
    ELSE
!$OMP ATOMIC
      D2PTHOUT(JSEQP,1) = D2PTHOUT(JSEQP,1) - D1PTHFLW_OUT(IPTH,ILEV)
    ENDIF
  END DO
END DO
!$OMP END PARALLEL DO

!$OMP PARALLEL DO                                              !! calculate total outflow from a grid
DO ISEQ=1, NSEQMAX
  IF( D2PTHOUT(ISEQ,1) > 1.D-10 )THEN
    DSTO_TMP = ( D2RIVSTO_OUT(ISEQ,1)+D2FLDSTO_OUT(ISEQ,1) ) &
                  - D2RIVOUT_OUT(ISEQ,1)*DT + D2RIVINF(ISEQ,1)*DT - D2FLDOUT_OUT(ISEQ,1)*DT + D2FLDINF(ISEQ,1)*DT
    D2RATE(ISEQ,1) = MIN( DSTO_TMP * (D2PTHOUT(ISEQ,1)*DT)**(-1.), 1.D0 )
  ELSE
    D2RATE(ISEQ,1) = 1.D0
  ENDIF
  D2PTHOUT(ISEQ,1) = D2PTHOUT(ISEQ,1) * D2RATE(ISEQ,1)
END DO
!$OMP END PARALLEL DO

!$OMP PARALLEL DO   
DO IPTH=1, NPTHOUT
  ISEQP=PTH_UPST(IPTH)
  JSEQP=PTH_DOWN(IPTH)

  DO ILEV=1, NPTHLEV
    IF( D1PTHFLW_OUT(IPTH,ILEV) >= 0.D0 )THEN
      D1PTHFLW_OUT(IPTH,ILEV) = D1PTHFLW_OUT(IPTH,ILEV)*D2RATE(ISEQP,1)
!$OMP ATOMIC
      D2PTHINF(JSEQP,1) = D2PTHINF(JSEQP,1) + D1PTHFLW_OUT(IPTH,ILEV)             !! total inflow [m3/s] (from upstream)
    ELSE
      D1PTHFLW_OUT(IPTH,ILEV) = D1PTHFLW_OUT(IPTH,ILEV)*D2RATE(JSEQP,1)
!$OMP ATOMIC
      D2PTHINF(ISEQP,1) = D2PTHINF(ISEQP,1) - D1PTHFLW_OUT(IPTH,ILEV)             !! total inflow [m3/s] (from upstream)
    ENDIF
    D1PTHFLW_PRE(IPTH,ILEV)=D1PTHFLW_OUT(IPTH,ILEV)
  END DO

END DO
!$OMP END PARALLEL DO

END SUBROUTINE CALC_PTHOUT
END MODULE CALC_PTHOUT_MOD
