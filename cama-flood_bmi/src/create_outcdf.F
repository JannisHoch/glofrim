MODULE CREATE_OUTCDF_MOD
CONTAINS 
SUBROUTINE CREATE_OUTCDF(IYYYY)
#ifdef UseCDF
! ===============================================
! CREATE OUTPUT NETCDF FILE 
!     Author.
!     -------
!        EMANUEL DUTRA
!     Modifications.
!     --------------
!        Original : 2011-05-04
!        E. Dutra, March 2014, netcdf4
! ===============================================
USE PARKIND1   ,ONLY: JPIM, JPRB
USE MOD_INPUT  ,ONLY: LOGNAM,     NX,NY, LOUTYYYY, COUTDIR, &
                      COUTDIR, ISYEAR,ISMON,ISDAY,IMIS,RMIS
USE MOD_OUTPUT, ONLY: CDFUNITS,COUTVARDIR,COUTVN,COUTLN,COUTUNIT,&
                      CSUFCDF, NVARS
USE MOD_MAP,    ONLY: D1LON,D1LAT
USE NETCDF
USE LIB_NETCDF_UTIL

IMPLICIT NONE

INTEGER(KIND=JPIM)  :: IYYYY

CHARACTER(LEN=256)  :: CFILE,CTIME,CYYYY
INTEGER(KIND=JPIM)  :: TIMEID,VARID,LATID,LONID
INTEGER(KIND=JPIM)  :: JF


!!===========================

WRITE(CTIME,'(A14,I4.4,A1,I2.2,A1,I2.2,A6)') 'seconds since ',ISYEAR,'-',ISMON,'-',ISDAY,' 00:00'
WRITE(CYYYY,'(I4)') IYYYY

DO JF=1,NVARS-1  ! NUMBER OF OUTPUT FILES 

  CFILE=TRIM(COUTDIR)//TRIM(COUTVARDIR(JF))//TRIM(COUTVN(JF))//TRIM(csufcdf)
  IF( LOUTYYYY ) CFILE=TRIM(COUTDIR)//TRIM(COUTVARDIR(JF))//TRIM(COUTVN(JF))//TRIM(CYYYY)//TRIM(csufcdf)
  IF ( TRIM(COUTVARDIR(JF)) .EQ. "NONE" ) CFILE="NONE"

  IF ( TRIM(CFILE) .EQ. "NONE")  THEN
     CDFUNITS(JF)=0
  ELSE
    CALL NCERROR( NF90_CREATE(CFILE,NF90_NETCDF4,CDFUNITS(JF)),'CREATING FILE:'//TRIM(CFILE) )

! === set dimension ===

    CALL NCERROR( NF90_DEF_DIM(CDFUNITS(JF), 'time', NF90_UNLIMITED, TIMEID) )

    CALL NCERROR( NF90_DEF_DIM(CDFUNITS(JF), 'lat', NY, LATID) )
    CALL NCERROR( NF90_DEF_DIM(CDFUNITS(JF), 'lon', NX, LONID) )

! === define variables ===

    CALL NCERROR( NF90_DEF_VAR(CDFUNITS(JF), 'lat', NF90_FLOAT, (/LATID/), VARID) )
    CALL NCERROR( NF90_PUT_ATT(CDFUNITS(JF), VARID, 'long_name','latitude') )
    CALL NCERROR( NF90_PUT_ATT(CDFUNITS(JF), VARID, 'units','degrees_north') )

    CALL NCERROR( NF90_DEF_VAR(CDFUNITS(JF), 'lon', NF90_FLOAT, (/LONID/), VARID) )
    CALL NCERROR( NF90_PUT_ATT(CDFUNITS(JF), VARID, 'long_name','longitude') )
    CALL NCERROR( NF90_PUT_ATT(CDFUNITS(JF), VARID, 'units','degrees_east') )

    CALL NCERROR( NF90_DEF_VAR(CDFUNITS(JF), 'time', NF90_DOUBLE, (/TIMEID/), VARID) ) 
    CALL NCERROR( NF90_PUT_ATT(CDFUNITS(JF), VARID, 'long_name','time') )
    CALL NCERROR( NF90_PUT_ATT(CDFUNITS(JF), VARID, 'units',CTIME) )

    
    CALL NCERROR( NF90_DEF_VAR(CDFUNITS(JF), COUTVN(JF), NF90_FLOAT, (/LONID,LATID,TIMEID/), VARID, &
                  DEFLATE_LEVEL=6,SHUFFLE=.True.), 'Creating Variable')
    CALL NCERROR( NF90_PUT_ATT(CDFUNITS(JF), VARID, 'long_name', COUTLN(JF)) )
    CALL NCERROR( NF90_PUT_ATT(CDFUNITS(JF), VARID, 'units',     COUTUNIT(JF)) )
    CALL NCERROR( NF90_PUT_ATT(CDFUNITS(JF), VARID, '_FillValue',RMIS) )

    CALL NCERROR( NF90_ENDDEF(CDFUNITS(JF)) )

! === put lon lat info ===

    CALL NCERROR ( NF90_INQ_VARID(CDFUNITS(JF),'lon',VARID),'getting id' )
    CALL NCERROR( NF90_PUT_VAR(CDFUNITS(JF),VARID,D1LON))

    CALL NCERROR ( NF90_INQ_VARID(CDFUNITS(JF),'lat',VARID),'getting id' )
    CALL NCERROR( NF90_PUT_VAR(CDFUNITS(JF),VARID,D1LAT))


    WRITE(LOGNAM,*) 'CFILE: ',TRIM(CFILE),' CVAR:',TRIM(COUTVN(JF)),&
                    ' CLNAME: ',TRIM(COUTLN(JF)),' CUNITS: ',TRIM(COUTUNIT(JF))
    WRITE(LOGNAM,*) 'OPEN IN UNIT: ',CDFUNITS(JF)
  ENDIF

ENDDO
#endif
END SUBROUTINE CREATE_OUTCDF

END MODULE CREATE_OUTCDF_MOD
