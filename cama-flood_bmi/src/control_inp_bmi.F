MODULE CONTROL_INP_MOD
CONTAINS 
SUBROUTINE CONTROL_INP(IYYYYP,IMMP,IDDP)
! ===============================================
! control input runoff
! ===============================================

USE PARKIND1   ,ONLY: JPIM, JPRB, JPRM
USE MOD_INPUT  ,ONLY: LOGNAM, NX, NY, NXIN, NYIN, INPN, DT, DTIN, DROFUNIT, LINTERP, LINPCDF, RMIS, LINPEND
USE MOD_INPUT  ,ONLY: CRUNOFFDIR, CRUNOFFPRE, CRUNOFFSUF, &
                      CRUNOFFCDF, CROFCDFVAR, SYEARIN, SMONIN, SDAYIN
USE MOD_MAP    ,ONLY: NSEQALL
USE MOD_TIME   ,ONLY: NSTEPS, KMINP
USE MOD_PROG   ,ONLY: D2RUNOFF
USE LIB_DATES  ,ONLY: DATE2MIN

#ifdef UseCDF
USE NETCDF
USE LIB_NETCDF_UTIL
#endif

!=================================================
implicit none
INTEGER(KIND=JPIM),INTENT(IN)    ::    IYYYYP,IMMP,IDDP                   !! date (start of time step)

!== LOCAL 
REAL(KIND=JPRM),ALLOCATABLE   ::  R2ROFFIN(:,:)  ! for input runoff (mm/day)

#ifdef UseCDF
INTEGER(KIND=JPIM)            ::  ISTEP,TIMEID
INTEGER(KIND=JPIM)            ::  NCID,VARID_RO,KMINCDFSTART,NCDFSTP
LOGICAL                       ::  LOPEN                               ! TRUE TO OPEN AND SETUP NETCDF FILE
SAVE NCID,VARID_RO,KMINCDFSTART,NCDFSTP,LOPEN     !! bugfix v362
DATA LOPEN /.TRUE./
#endif

!$ SAVE
INTEGER(KIND=JPIM)            ::  ISEQ

! ===============================================
#ifdef UseCDF
CALL INIT_RUNOFF_CDF
#endif
! ===============================================
!$OMP PARALLEL DO
DO ISEQ=1, NSEQALL
  D2RUNOFF(ISEQ,1)=0.D0
ENDDO
!$OMP END PARALLEL DO

ALLOCATE(R2ROFFIN(NXIN,NYIN))
IF ( .not. LINPCDF ) THEN 
  CALL READ_RUNOFF_BIN 
ELSE 
  CALL READ_RUNOFF_CDF
ENDIF

! Interpolation & unit conversion (input runoff unit -> m3/sec)
IF( LINTERP )THEN
  CALL ROFF_INTERP(R2ROFFIN,D2RUNOFF)
ELSE
  CALL CONV_RESOL(R2ROFFIN,D2RUNOFF)
ENDIF

DEALLOCATE(R2ROFFIN)

CONTAINS





! ================================================
SUBROUTINE ROFF_INTERP(R2ROFFIN,D2RUNOFF)
USE MOD_MAP    ,ONLY: I1SEQX, I1SEQY, NSEQALL
USE MOD_MAP    ,ONLY: INPX, INPY, INPA
IMPLICIT NONE

REAL(KIND=JPRM),INTENT(IN)  ::  R2ROFFIN(:,:)     !! mm/day
REAL(KIND=JPRB),INTENT(OUT) ::  D2RUNOFF(:,:)     !! m3/s

!$ SAVE
INTEGER(KIND=JPIM)  ::  ISEQ
INTEGER(KIND=JPIM)  ::  IX, IY, IXIN, IYIN, INPI  !! FOR OUTPUT
!$OMP THREADPRIVATE    (IX, IY, IXIN, IYIN, INPI)
! ================================================
!$OMP PARALLEL DO
DO ISEQ=1, NSEQALL
  IX=I1SEQX(ISEQ)
  IY=I1SEQY(ISEQ)
  D2RUNOFF(ISEQ,1)=0.D0
  DO INPI=1, INPN
    IXIN=INPX(IX,IY,INPI)
    IYIN=INPY(IX,IY,INPI)
    IF( IXIN>0 )THEN
      IF( IXIN > NXIN .OR. IYIN > NYIN ) THEN
        PRINT*, "error"
        PRINT*,'XXX',ISEQ,IX,IY,INPI,IXIN,IYIN
        CYCLE
      ENDIF
      IF( R2ROFFIN(IXIN,IYIN).NE.RMIS )THEN
        D2RUNOFF(ISEQ,1) = D2RUNOFF(ISEQ,1) + R2ROFFIN(IXIN,IYIN) * INPA(IX,IY,INPI) * DTIN**(-1.)  * DROFUNIT
        D2RUNOFF(ISEQ,1) = MAX(D2RUNOFF(ISEQ,1), 0.D0)
      ENDIF
    ENDIF
  END DO
  D2RUNOFF(ISEQ,1)=MAX(D2RUNOFF(ISEQ,1), 0.D0)
END DO
!$OMP END PARALLEL DO

RETURN
END SUBROUTINE ROFF_INTERP






! ================================================
SUBROUTINE CONV_RESOL(R2ROFFIN,D2RUNOFF)
USE MOD_MAP    ,ONLY: I1SEQX, I1SEQY, NSEQALL
USE MOD_MAP    ,ONLY: D2GRAREA
IMPLICIT NONE

REAL(KIND=JPRM),INTENT(IN)  ::  R2ROFFIN(:,:)     !! mm/day
REAL(KIND=JPRB),INTENT(OUT) ::  D2RUNOFF(:,:)     !! m3/s

INTEGER(KIND=JPIM)  ::  BY

!$ SAVE
INTEGER(KIND=JPIM)  ::  ISEQ
INTEGER(KIND=JPIM)  ::  IXIN, IYIN
!$OMP THREADPRIVATE    (IXIN, IYIN)
! ================================================
BY = NX/NXIN
!$OMP PARALLEL DO
DO ISEQ=1, NSEQALL
  IXIN=INT((I1SEQX(ISEQ)-1)/BY)+1
  IYIN=INT((I1SEQY(ISEQ)-1)/BY)+1
  IF( R2ROFFIN(IXIN,IYIN).NE.RMIS )THEN
    D2RUNOFF(ISEQ,1) = R2ROFFIN(IXIN,IYIN) * D2GRAREA(ISEQ,1) * DTIN**(-1.) * DROFUNIT
    D2RUNOFF(ISEQ,1) = MAX(D2RUNOFF(ISEQ,1), 0.D0)
  ELSE
    D2RUNOFF(ISEQ,1)=0.D0
  ENDIF
END DO
!$OMP END PARALLEL DO

RETURN
END SUBROUTINE CONV_RESOL





! ==================================================
SUBROUTINE READ_RUNOFF_BIN
USE MOD_INPUT ,ONLY: TMPNAM
IMPLICIT NONE
CHARACTER(LEN=256)           ::  CIFNAME             !! INPUT FILE
CHARACTER(LEN=256)           ::  CDATE               !!

#ifdef ConvEnd
!$ SAVE
INTEGER(KIND=JPIM)  ::  IXIN, IYIN
!$OMP THREADPRIVATE    (IXIN)
#endif
! ==================================================

WRITE(CDATE,'(I4.4,I2.2,I2.2)')IYYYYP,IMMP,IDDP
 CIFNAME=TRIM(CRUNOFFDIR)//TRIM(CRUNOFFPRE)//TRIM(CDATE)//TRIM(CRUNOFFSUF)
WRITE(LOGNAM,*) "READ_RUNOFF BIN:",TRIM(CIFNAME)

OPEN(TMPNAM,FILE=CIFNAME,FORM='UNFORMATTED',ACCESS='DIRECT',RECL=4*NXIN*NYIN)
READ(TMPNAM,REC=1) R2ROFFIN
CLOSE(TMPNAM)

#ifdef ConvEnd
IF( LINPEND )THEN
!$OMP PARALLEL DO
  DO IYIN=1, NYIN
    DO IXIN=1, NXIN
      CALL ENDIAN4(R2ROFFIN(IXIN,IYIN))
    END DO
  END DO
!$OMP END PARALLEL DO
ENDIF
#endif

END SUBROUTINE READ_RUNOFF_BIN





! ==================================================
SUBROUTINE READ_RUNOFF_CDF
#ifdef UseCDF
USE NETCDF
USE LIB_NETCDF_UTIL
IMPLICIT NONE

INTEGER(KIND=JPIM)  :: IREC

IREC=(KMINP-KMINCDFSTART)*60_JPIM / int(DTIN,JPIM)  +1     !! (second from netcdf start time) / (input time step)
IF ( IREC == NCDFSTP + 1 ) THEN
  WRITE(LOGNAM,*) "!!! READ_RUNOFF CDF:READING AGAIN LAST DAY !!!"
  IREC=IREC-1
ENDIF
WRITE(LOGNAM,*) "READ_RUNOFF CDF:",TRIM(CRUNOFFCDF)
WRITE(LOGNAM,*) "READ_RUNOFF CDF:",KMINP,KMINCDFSTART,IREC
CALL NCERROR( NF90_GET_VAR(NCID,VARID_RO,R2ROFFIN,(/1,1,IREC/),(/NXIN,NYIN,1/)),'READING RUNOFF' )

#endif
END SUBROUTINE READ_RUNOFF_CDF



! =================================================
#ifdef UseCDF
SUBROUTINE INIT_RUNOFF_CDF

IF ( LINPCDF .AND. LOPEN ) THEN
  LOPEN=.FALSE.

  CALL NCERROR( NF90_OPEN(CRUNOFFCDF,NF90_NOWRITE,NCID),'OPENING :'//CRUNOFFCDF )
  CALL NCERROR( NF90_INQ_VARID(NCID,CROFCDFVAR,VARID_RO))
  CALL NCERROR( NF90_INQ_DIMID(NCID,'time',TIMEID),'GETTING TIME ID FORCING RUNOFF')
  CALL NCERROR( NF90_INQUIRE_DIMENSION(NCID=NCID,DIMID=TIMEID,LEN=NCDFSTP),'GETTING TIME LENGTH')
  KMINCDFSTART=DATE2MIN(SYEARIN*10000+SMONIN*100+SDAYIN,0)
  !! CHECK IF START IF OK 
  ISTEP=(KMINP-KMINCDFSTART)*60_JPIM/INT(DTIN,JPIM)+1
  IF ( ISTEP .LE. 0  ) THEN 
    WRITE(LOGNAM,*) "READ_RUNOFF CDF: RUNS STARTS EARLY THAN FORCING DATA"
    WRITE(LOGNAM,*) "READ_RUNOFF CDF: STP1,KMINP,KMINCDFSTART",ISTEP,KMINP,KMINCDFSTART
    STOP 9
  ENDIF
!  ISTEP=(KMINP+NSTEPS*INT(DT/60,JPIM)-KMINCDFSTART)*60_JPIM/INT(DTIN,JPIM)+1
  ISTEP=(KMINP+NSTEPS*INT(DT/60,JPIM)-KMINCDFSTART)*60_JPIM/INT(DTIN,JPIM)
  IF ( ISTEP .GT. NCDFSTP+1  ) THEN 
    WRITE(LOGNAM,*) "READ_RUNOFF CDF: RUNS ENDS LATTER THAN FORCING DATA"
    WRITE(LOGNAM,*) "READ_RUNOFF CDF: STP1,NCDFSTP",ISTEP,NCDFSTP
    STOP 9
  ENDIF
  WRITE(LOGNAM,*) "READ_RUNOFF CDF:",TRIM(CRUNOFFCDF),'OPEN IN UNIT AND ID',NCID,VARID_RO
ENDIF

END SUBROUTINE INIT_RUNOFF_CDF
#endif




END SUBROUTINE CONTROL_INP
END MODULE CONTROL_INP_MOD
