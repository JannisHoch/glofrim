MODULE CALC_FLDOUT_MOD
CONTAINS
SUBROUTINE CALC_FLDOUT
! ================================================
! calculation of floodplain flow
! ================================================
USE PARKIND1   ,ONLY: JPIM, JPRB
USE MOD_INPUT  ,ONLY: DT
USE MOD_INPUT  ,ONLY: PMANFLD,  PDSTMTH,  PGRV
USE MOD_INPUT  ,ONLY: LMEANSL, LBOUNDSL
USE MOD_MAP    ,ONLY: I1NEXT,   NSEQALL,  NSEQRIV,  NSEQMAX
USE MOD_MAP    ,ONLY: D2RIVELV, D2ELEVTN, D2NXTDST, D2RIVLEN, D2RIVHGT, D2RIVWTH
USE MOD_MAP    ,ONLY: D2MEANSL
USE MOD_PROG   ,ONLY: D2FLDSTO_OUT, D2FLDOUT_OUT, D2RIVOUT_OUT
USE MOD_PROG   ,ONLY: D2FLDOUT_PRE, D2RIVDPH_PRE, D2FLDSTO_PRE
USE MOD_PROG   ,ONLY: D2BOUND
USE MOD_DIAG   ,ONLY: D2FLDDPH, D2FLDINF, D2SFCELV

implicit none

!*** Local
      REAL(KIND=JPRB)    ::  D2SFCELV_NOW(NSEQMAX,1)                  !! water surface elev (t)  [m] (for floodplain)
      REAL(KIND=JPRB)    ::  D2SFCELV_PRE(NSEQMAX,1)                  !! water surface elev (t-1)[m] (for floodplain)
      REAL(KIND=JPRB)    ::  D2FLWARE_NOW(NSEQMAX,1)                  !! flow area (t)           [m2]
      REAL(KIND=JPRB)    ::  D2FLWARE_PRE(NSEQMAX,1)                  !! flow area (t-1)         [m2]
      REAL(KIND=JPRB)    ::  D2FLDDPH_PRE(NSEQMAX,1)                  !! floodplain water depth  [m]
      REAL(KIND=JPRB)    ::  D2STOOUT(NSEQMAX,1)                      !! total outflow from grid [m3]
      REAL(KIND=JPRB)    ::  D2RATE(NSEQMAX,1)                        !! outflow correction
!$ SAVE
      REAL(KIND=JPRB)    ::  DSLOPE, DFLW, DOUT_PRE, DFLW_PRE, DFLW_IMP, DARE_IMP
      INTEGER(KIND=JPIM) ::  ISEQ, JSEQ
!$OMP THREADPRIVATE         (DSLOPE, DFLW, DOUT_PRE, DFLW_PRE, DFLW_IMP, DARE_IMP, JSEQ)
! ================================================
!$OMP PARALLEL DO
DO ISEQ=1, NSEQALL
  D2SFCELV_NOW(ISEQ,1) = MAX( D2ELEVTN(ISEQ,1), D2SFCELV(ISEQ,1) )
  D2SFCELV_PRE(ISEQ,1) = MAX( D2ELEVTN(ISEQ,1), D2RIVELV(ISEQ,1)+D2RIVDPH_PRE(ISEQ,1) )
  D2FLDDPH_PRE(ISEQ,1) = MAX( D2RIVDPH_PRE(ISEQ,1)-D2RIVHGT(ISEQ,1), 0.D0 )
  D2FLWARE_NOW(ISEQ,1) = D2FLDSTO_OUT(ISEQ,1) * D2RIVLEN(ISEQ,1)**(-1.D0)
  D2FLWARE_PRE(ISEQ,1) = D2FLDSTO_PRE(ISEQ,1) * D2RIVLEN(ISEQ,1)**(-1.D0)
  D2FLWARE_NOW(ISEQ,1) = MAX( D2FLWARE_NOW(ISEQ,1) - D2FLDDPH(ISEQ,1)    *D2RIVWTH(ISEQ,1), 0.D0 ) !! remove river channel area
  D2FLWARE_PRE(ISEQ,1) = MAX( D2FLWARE_PRE(ISEQ,1) - D2FLDDPH_PRE(ISEQ,1)*D2RIVWTH(ISEQ,1), 0.D0 )
  D2FLDINF(ISEQ,1) = 0.D0
  D2STOOUT(ISEQ,1) = 0.D0
END DO
!$OMP END PARALLEL DO

!$OMP PARALLEL DO
DO ISEQ=1, NSEQRIV                                                    !! for normal cell
  JSEQ=I1NEXT(ISEQ)

  DSLOPE  = (D2SFCELV_NOW(ISEQ,1)-D2SFCELV_NOW(JSEQ,1)) * D2NXTDST(ISEQ,1)**(-1.D0)

  DFLW = MIN(D2SFCELV_NOW(ISEQ,1),D2SFCELV_NOW(JSEQ,1)) - D2ELEVTN(ISEQ,1)        !! should be min[i,j] to avoid instability
  DFLW = MAX(DFLW,0.D0)
  DFLW_PRE = MIN(D2SFCELV_PRE(ISEQ,1),D2SFCELV_PRE(JSEQ,1)) - D2ELEVTN(ISEQ,1)
  DFLW_PRE = MAX(DFLW_PRE,0.D0)

  DFLW_IMP = (DFLW*DFLW_PRE)**0.5D0                                     !! semi implicit flow depth

  DARE_IMP =      (D2FLWARE_NOW(ISEQ,1)*D2FLWARE_PRE(ISEQ,1))**0.5D0    !! semi implicit flow area
  DARE_IMP = MIN( (D2FLWARE_NOW(JSEQ,1)*D2FLWARE_PRE(JSEQ,1))**0.5D0, DARE_IMP )

  IF( DFLW_IMP<=0.D0 ) DFLW_IMP=DFLW
  IF( DARE_IMP<=0.D0 ) DARE_IMP=D2FLWARE_NOW(ISEQ,1)

  IF( DFLW_IMP>1.D-5 .and. DARE_IMP>1.D-5 )THEN                         !! local inertial equation, see [Bates et al., 2010, J.Hydrol.]
    DOUT_PRE = D2FLDOUT_PRE(ISEQ,1)
    D2FLDOUT_OUT(ISEQ,1) = ( DOUT_PRE + PGRV*DT*DARE_IMP*DSLOPE ) &
                           * (1.D0 + PGRV*DT*PMANFLD**2.D0*abs(DOUT_PRE)*DFLW_IMP**(-4.D0/3.D0)*DARE_IMP**(-1.D0) )**(-1.D0)
  ELSE
    D2FLDOUT_OUT(ISEQ,1) = 0.D0
  ENDIF
  IF( D2FLDOUT_OUT(ISEQ,1)*D2RIVOUT_OUT(ISEQ,1)<0.D0 ) D2FLDOUT_OUT(ISEQ,1)=0.D0

  IF( D2FLDOUT_OUT(ISEQ,1) >= 0.D0 )THEN                                  !! total outflow from each grid
    D2STOOUT(ISEQ,1) = D2STOOUT(ISEQ,1) + D2FLDOUT_OUT(ISEQ,1)*DT
  ELSE
!$OMP ATOMIC
    D2STOOUT(JSEQ,1) = D2STOOUT(JSEQ,1) - D2FLDOUT_OUT(ISEQ,1)*DT
  ENDIF
END DO
!$OMP END PARALLEL DO

!$OMP PARALLEL DO
DO ISEQ=NSEQRIV+1, NSEQALL                                            !! for river mouth cell
  IF( LMEANSL ) THEN
    IF( LBOUNDSL )THEN
      DSLOPE = ( D2SFCELV(ISEQ,1)-(D2ELEVTN(ISEQ,1)+D2BOUND(ISEQ,1)+D2MEANSL(ISEQ,1)) ) * PDSTMTH**(-1.D0)   !! variable rivermouth boundary + mean sea level
    ELSE
      DSLOPE = ( D2SFCELV(ISEQ,1)-(D2ELEVTN(ISEQ,1)+D2MEANSL(ISEQ,1)) ) * PDSTMTH**(-1.D0)   !! variable rivermouth boundary 
    ENDIF
  ELSE
    IF( LBOUNDSL )THEN
      DSLOPE = ( D2SFCELV(ISEQ,1)-(D2ELEVTN(ISEQ,1)+D2BOUND(ISEQ,1)) ) * PDSTMTH**(-1.D0)   !! variable rivermouth boundary
    ELSE
    DSLOPE = ( D2SFCELV(ISEQ,1)-D2ELEVTN(ISEQ,1) ) * PDSTMTH**(-1.D0)
!  DSLOPE = MAX( DSLOPE, 0.D0 )                                        !! no backward flow from ocean
    ENDIF
  ENDIF

  DFLW   = D2FLDDPH(ISEQ,1)

  DFLW_PRE=MAX(D2SFCELV_PRE(ISEQ,1)-D2ELEVTN(ISEQ,1),0.D0)
  DFLW_IMP=(DFLW*DFLW_PRE)**0.5D0
  DARE_IMP = (D2FLWARE_NOW(ISEQ,1)*D2FLWARE_PRE(ISEQ,1))**0.5D0
  IF( DFLW_IMP<=0.D0 ) DFLW_IMP=DFLW
  IF( DARE_IMP<=0.D0 ) DARE_IMP=D2FLWARE_NOW(ISEQ,1)

  IF( DFLW_IMP>1.D-5 .and. DARE_IMP>1.D-5 )THEN
    DOUT_PRE = D2FLDOUT_PRE(ISEQ,1)
    D2FLDOUT_OUT(ISEQ,1) = ( DOUT_PRE + PGRV*DT*DARE_IMP*DSLOPE ) &
                           * (1.D0 + PGRV*DT*PMANFLD**2.D0*abs(DOUT_PRE)*DFLW_IMP**(-4.D0/3.D0)*DARE_IMP**(-1.D0) )**(-1.D0)
  ELSE
    D2FLDOUT_OUT(ISEQ,1) = 0.D0
  ENDIF
  if( D2FLDOUT_OUT(ISEQ,1) >= 0.D0 ) D2STOOUT(ISEQ,1) = D2STOOUT(ISEQ,1) + D2FLDOUT_OUT(ISEQ,1)*DT
END DO
!$OMP END PARALLEL DO


!$OMP PARALLEL DO                                                     !! calculate total outflow from a grid
DO ISEQ=1, NSEQALL                                                    !! outflow correction applied when the total outflow > storage
  IF( D2STOOUT(ISEQ,1) > 0.D0 )THEN
    D2RATE(ISEQ,1) = MIN( D2FLDSTO_OUT(ISEQ,1) * D2STOOUT(ISEQ,1)**(-1.), 1.D0 )
  ELSE
    D2RATE(ISEQ,1) = 1.D0
  ENDIF
END DO
!$OMP END PARALLEL DO

!$OMP PARALLEL DO
DO ISEQ=1, NSEQRIV
  JSEQ=I1NEXT(ISEQ)
  IF( D2FLDOUT_OUT(ISEQ,1) >= 0.D0 )THEN
    D2FLDOUT_OUT(ISEQ,1) = D2FLDOUT_OUT(ISEQ,1)*D2RATE(ISEQ,1)
  ELSE
    D2FLDOUT_OUT(ISEQ,1) = D2FLDOUT_OUT(ISEQ,1)*D2RATE(JSEQ,1)
  ENDIF
!$OMP ATOMIC
  D2FLDINF(JSEQ,1) = D2FLDINF(JSEQ,1) + D2FLDOUT_OUT(ISEQ,1)             !! total inflow [m3/s] (from upstream)

  D2FLDOUT_PRE(ISEQ,1)=D2FLDOUT_OUT(ISEQ,1)
  D2FLDSTO_PRE(ISEQ,1)=D2FLDSTO_OUT(ISEQ,1)
END DO
!$OMP END PARALLEL DO

!$OMP PARALLEL DO
DO ISEQ=NSEQRIV+1, NSEQALL
  D2FLDOUT_OUT(ISEQ,1) = D2FLDOUT_OUT(ISEQ,1)*D2RATE(ISEQ,1)

  D2FLDOUT_PRE(ISEQ,1)=D2FLDOUT_OUT(ISEQ,1)
  D2FLDSTO_PRE(ISEQ,1)=D2FLDSTO_OUT(ISEQ,1)
END DO
!$OMP END PARALLEL DO

END SUBROUTINE CALC_FLDOUT
END MODULE CALC_FLDOUT_MOD
